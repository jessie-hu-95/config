#+title: Jessie's GNU Emacs Configuration

* Package Manager - =elpaca=

** Bootstrap

This is used to set up and manage the Elpaca package manager in Emacs. Elpaca is
a new Emacs package manager that builds packages asynchronously.

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** =use-package= support

The first sexp  initializes the elpaca-use-package mode,  which provides support
for the use-package macro in Elpaca. This means that whenever a package is added
using Elpaca, it will also configure it to be used with the =use-package= macro.
This  allows for  easier and  more  consistent package  configuration in  Emacs.
=(elpaca-wait)=  This statement  ensures  that all  asynchronous Elpaca  package
operations finish before continuing with the rest of the Emacs configuration.

#+begin_src emacs-lisp
  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))
  (elpaca-wait)
#+end_src

** =use-feature= macro

This  macro, =use-feature=,  works like  =use-package= but  it accommodates  the
asynchronous package  installation process facilitated  by Elpaca. It  creates a
new  =use-package=  form  that  does not  use  Elpaca's  asynchronous  handling,
ensuring all  settings and configurations  of a  package are loaded  before use.
This macro  is useful for maintaining  a synchronous order in  the configuration
when required.

#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    "Like `use-package' but accounting for asynchronous installation.
    NAME and ARGS are in `use-package'."
    (declare (indent defun))
    `(use-package ,name
       :elpaca nil
       ,@args))
#+end_src

** Load =exec-path= from shell

This  snippet installs  and  initializes the  =exec-path-from-shell= package  on
MacOS systems.  This package ensures that  Emacs uses the same  PATH environment
variable as your shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (eq system-type 'darwin)
    :config (exec-path-from-shell-initialize))
  (elpaca-wait)
#+end_src

** Hide mode line lighter

The =diminish= package is installed to hide or minimize minor mode indicators.

#+begin_src emacs-lisp
  (use-package diminish)
  (elpaca-wait)
  (diminish 'visual-line-mode)
  (diminish 'line-number-mode)
  (add-hook 'eldoc-mode-hook
	    (lambda () (diminish 'eldoc-mode)))
  (add-hook 'flymake-mode-hook
	    (lambda () (diminish 'flymake-mode)))
#+end_src

* Basic Configuration

** Dired

*** External =ls= program

The code  configures Dired  mode in Emacs  to use an  external =ls=  command for
directory listings. It sets the  =insert-directory-program= variable to the path
of the  =ls= command and allows  customization of the command's  options through
the =DIRED_LS_OPTS= environment variable.

#+begin_src emacs-lisp
  (defun jess/config-dired-external-ls ()
    (setq insert-directory-program
	  (shell-command-to-string "which ls | tr -d '\n'"))
    (let* ((ls-opts (getenv "DIRED_LS_OPTS")))
      (if ls-opts
	  (custom-set-variables
	   '(dired-listing-switches ls-opts)))))
  (jess/config-dired-external-ls)
#+end_src

*** Reusing Dired buffer

Defines the =dired-find-alternate-file= command as not disabled, allowing you to
open a directory in =dired= mode without creating a new buffer.

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src

The =jess/dired-find-file= function checks if  the selected file is a directory.
If it is, it opens it with =dired-find-alternate-file=, which reuses the current
buffer  for the  new  directory. If  it  is a  regular file,  it  opens it  with
=dired-find-file=, which creates a new buffer for the file.

#+begin_src emacs-lisp
  (defun jess/dired-find-file ()
    (interactive)
    (let* ((filename (dired-get-filename)))
      (if (file-directory-p filename)
	  (dired-find-alternate-file)
	(dired-find-file))))
#+end_src

The =jess/dired-goto-parent-directory=  function quickly moves up  to the parent
directory in dired mode using the =find-alternate-file= command.

#+begin_src emacs-lisp
  (defun jess/dired-goto-parent-directory ()
    (interactive)
    (find-alternate-file ".."))
#+end_src

*** Prefixing Dired buffers

This code snippet defines the function =jess/prefix-dired-buffers= to prefix the
names of =dired= buffers with the  directory name. It renames the current buffer
by generating a new name using the  format ="dired %s"= followed by the value of
=dired-directory=.

#+begin_src emacs-lisp
  (defun jess/prefix-dired-buffers ()
    (rename-buffer (generate-new-buffer-name
		    (format "dired %s" dired-directory))))
#+end_src

*** Hide unintersting files

This  code  snippet defines  the  constant  variable =jess/dired-omit-files=  to
specify the  files to be omitted  in =dired= mode. It  concatenates the standard
value  of   =dired-omit-files=  with   the  file  patterns   ="\.DS_Store"=  and
="\.CFUserTextEncoding"=.

#+begin_src emacs-lisp
  (defconst jess/dired-omit-files
    (progn (require 'dired-x)
	   (concat (custom--standard-value 'dired-omit-files)
	    "\\|\.DS_Store"
	    "\\|\.CFUserTextEncoding")))
#+end_src

*** Applying configurations

This   code  snippet   enhances  =dired=   mode   in  Emacs   by  applying   the
=jess/prefix-dired-buffers= function  to prefix buffer names  with the directory
name. It also  defines key bindings in =dired-mode-map= for  convenient file and
directory navigation using =RET= and =^= keys.

#+begin_src emacs-lisp
  (use-feature dired
    :hook
    (dired-mode . jess/prefix-dired-buffers)
    :bind
    (:map dired-mode-map
	  ("RET" . jess/dired-find-file)
	  ("^"   . jess/dired-goto-parent-directory)))
#+end_src

This  code snippet  enables file  omission in  =dired= mode  by customizing  the
=dired-omit-files=  variable  and  activating  =dired-omit-mode=.  It  uses  the
=jess/dired-omit-files= value to specify the files to be omitted.

#+begin_src emacs-lisp
  (use-feature dired-x
    :after dired
    :custom
    (dired-omit-files jess/dired-omit-files)
    :hook
    (dired-mode . dired-omit-mode))
#+end_src

** Making Emacs write auxiliary files elsewhere

This  code  sets up  a  structured  directory  system  within the  user's  Emacs
directory to organize backup, auto-save, and lock files:

#+begin_src emacs-lisp
  (defconst jess/aux-directory
    (expand-file-name "aux" user-emacs-directory))

  (defconst jess/backup-directory
    (expand-file-name "backup" jess/aux-directory))
  (make-directory jess/backup-directory 'parents)

  (defconst jess/auto-save-directory
    (expand-file-name "auto-save" jess/aux-directory))
  (make-directory jess/auto-save-directory 'parents)

  (defconst jess/lock-directory
    (expand-file-name "lock" jess/aux-directory))
  (make-directory jess/lock-directory 'parents)

  (defconst jess/custom-file
    (expand-file-name "custom.el" temporary-file-directory))
#+end_src

*** Backup files

This snippet customizes Emacs' backup settings:
1. Backup files are directed to =jess/backup-directory=.
2. Emacs is  set to backup by copying, automatically  delete older versions, and
   version backups.
3. It's configured to keep 64 latest and 32 oldest backup versions.

#+begin_src emacs-lisp
  (custom-set-variables
   '(backup-directory-alist `((".*" . ,jess/backup-directory)))
   '(backup-by-copying t)
   '(delete-old-versions t)
   '(kept-new-versions 64)
   '(kept-old-versions 32)
   '(version-control t))
#+end_src

*** Auto-save files

This  code  snippet  customizes  the  auto-save behavior  in  Emacs  by  setting
=auto-save-interval=  to =32=  seconds  and =auto-save-file-name-transforms=  to
specify the directory and naming pattern for auto-save files.

#+begin_src emacs-lisp
  (custom-set-variables
   '(auto-save-interval 32)
   '(auto-save-file-name-transforms
     `(("\\`/.*/\\([^/]+\\)\\'"
	,(concat jess/auto-save-directory "/\\1") t))))
#+end_src

*** Lock files

This  code snippet  customizes the  locking behavior  in Emacs  by specifying  a
directory and naming pattern for lock files.

#+begin_src emacs-lisp
  (custom-set-variables
   '(lock-file-name-transforms
     `(("\\`/.*/\\([^/]+\\)\\'" ,(concat jess/lock-directory "/\\1") t))))
#+end_src

*** Custom file

This code snippet sets up the Emacs customizations file and handles its loading.
It also  adds a  hook to  prompt the  user to  customize unsaved  options before
quitting Emacs.

#+begin_src emacs-lisp
  (custom-set-variables '(custom-file jess/custom-file))
  (load jess/custom-file 'noerror)
  (add-hook 'kill-emacs-query-functions
	    'custom-prompt-customize-unsaved-options)
#+end_src

** Modifier keys

This snippet  customizes Emacs settings  specifically for macOS systems.  If the
system type is 'darwin' (indicating macOS).

#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
    (custom-set-variables
     '(mac-pass-command-to-system nil)
     '(mac-pass-control-to-system nil)
     '(mac-command-modifier 'super)
     '(mac-right-command-modifier 'meta)))
#+end_src

** Key binding to load init file

This  keybinding allows  you to  quickly reload  your Emacs  configuration while
working within Emacs itself.

#+begin_src emacs-lisp
  (global-set-key (kbd "s-i")
		  (lambda () (interactive) (load-file user-init-file)))
#+end_src

** UI configurations

This snippet customizes various visual and scrolling settings in Emacs:

#+begin_src emacs-lisp
  (custom-set-variables
     ;; Disable scroll bar
     '(scroll-bar-mode nil)

     ;; Disable tool bar
     '(tool-bar-mode nil)

     ;; Enable highlighting of the current line
     '(global-hl-line-mode t)

     ;; Enable visual line mode for wrapping long lines
     '(global-visual-line-mode t)

     ;; Enable line number display in all buffers
     '(global-display-line-numbers-mode t)

     ;; Disable mode line lighter for line numbers
     '(line-number-mode nil)

     ;; Preserve cursor position when scrolling
     '(scroll-preserve-screen-position t)

     ;; Specify the threshold for scrolling the window by lines instead of pixels
     '(scroll-conservatively 101)

     '(pixel-scroll-mode t)

     ;; Set default frame attributes
     '(default-frame-alist '((width . 88) (height . 24))))
#+end_src

#+begin_src emacs-lisp
  (global-set-key [remap scroll-up-command] (lambda () (interactive) (pixel-scroll-up 16)))
  (global-set-key [remap scroll-down-command] (lambda () (interactive) (pixel-scroll-down 16)))
#+end_src

The =ef-themes=  package provides a collection  of custom Emacs themes  that you
can use  to customize the visual  appearance of your Emacs  editor. These themes
offer different color schemes and styles to enhance your coding experience.

#+begin_src emacs-lisp
  (use-package ef-themes
    :custom
    (ef-themes-region '(no-extend))
    :hook
    (elpaca-after-init . (lambda () (load-theme 'ef-summer t))))
#+end_src

** Minibuffer configurations

This code snippet customizes Emacs'  minibuffer settings by defining and setting
properties for the  minibuffer prompt using =jess/minibuffer-prompt-properties=.
It  also  specifies  the  command completion  predicate  and  enables  recursive
minibuffers.

#+begin_src emacs-lisp
  (defconst jess/minibuffer-prompt-properties
    (cl-list* 'cursor-intangible t
	      (custom--standard-value 'minibuffer-prompt-properties)))
  (custom-set-variables
   '(minibuffer-prompt-properties jess/minibuffer-prompt-properties)
   '(read-extended-command-predicate 'command-completion-default-include-p)
   '(enable-recursive-minibuffers t))
#+end_src

** Save recent editing record

*** Recent opened files

This code  configures the  recentf mode  in Emacs by  setting variables  such as
=recentf-max-menu-items= (maximum number of recent files displayed in the menu),
=recentf-max-saved-items= (maximum  number of recent  files saved in  the list),
=recentf-auto-cleanup= (prevents  automatic deletion of non-existent  files from
the   recentf    list),   and   enabling   =recentf-mode=.    Furthermore,   the
=recentf-save-list= function is scheduled to run every 3 minutes to periodically
save the recentf list.

#+begin_src emacs-lisp
  (custom-set-variables
   '(recentf-max-menu-items 64)
   '(recentf-max-saved-items 256)
   '(recentf-auto-cleanup 'never)
   '(recentf-mode t))
  (global-set-key (kbd "s-r") 'recentf-open-files)
  (run-at-time nil (* 3 60) 'recentf-save-list)
#+end_src

*** Save point places

The save-place feature in Emacs remembers the location of the last visited point
in  each file,  allowing  you to  resume  editing from  the  same position  when
reopening the file.

#+begin_src emacs-lisp
  (custom-set-variables
   '(save-place-limit 1024)
   '(save-place-mode t))
#+end_src

*** Auto revert buffers

These  settings ensure  that buffers  are automatically  updated to  reflect any
changes made to their associated files.

#+begin_src emacs-lisp
  (custom-set-variables
   '(auto-revert-interval 0.5)
   '(global-auto-revert-non-file-buffers t)
   '(global-auto-revert-mode t))
#+end_src

*** Undo history

This configuration  allows you to use  the =undo-tree= package for  managing and
visualizing undo/redo history in Emacs.

#+begin_src emacs-lisp
  (defconst jess/undo-tree-directory
    (expand-file-name "undo-tree" jess/aux-directory))
  (use-package undo-tree
    :diminish
    :custom
    (undo-tree-history-directory-alist
     `((".*" . ,jess/undo-tree-directory)))
    (global-undo-tree-mode t))
#+end_src

*** Window layout history

The =winner=  package (built-in) provides  the ability  to undo and  redo window
configurations in Emacs, allowing you  to easily switch between previously saved
window arrangements.

#+begin_src emacs-lisp
  (use-feature winner
    :custom (winner-mode t))
#+end_src

*** Minibuffer history

The =savehist= package  allows Emacs to save and restore  various history lists,
such as  command history, minibuffer  history, and search history,  across Emacs
sessions.

#+begin_src emacs-lisp
  (use-feature savehist
    :custom (savehist-mode t))
#+end_src

** Utilities

*** Some useful key bindings

This  code  snippet  configures  key  bindings  for  the  =forward-to-word=  and
=backward-to-word= functions in Emacs.

#+begin_src emacs-lisp
  (use-feature misc
    :bind
    ("M-F" . forward-to-word)
    ("M-B" . backward-to-word))
#+end_src

*** Which key

The  =which-key=  package  provides  a helpful  popup  that  displays  available
keybindings and  their associated commands  in Emacs, aiding in  discovering and
remembering key combinations.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :custom
    (which-key-side-window-location 'left)
    (which-key-max-description-length 36)
    (which-key-max-display-columns 1)
    (which-key-mode t))
#+end_src

*** Completion

The =company= package provides auto-completion  capabilities in Emacs, making it
easier to type and navigate code with suggestions and completions.

#+begin_src emacs-lisp
  (use-package company
    :diminish
    :custom
    ;; Configurations File
    (company-minimum-prefix-length 1)
    (company-idle-delay 0)
    (global-company-mode t)
    (company-require-match nil)
    ;; Tooltip Frontends
    (company-tooltip-align-annotations t)
    (company-tooltip-limit 32)
    (company-tooltip-offset-display 'lines)
    (company-tooltip-flip-when-above t)
    (company-format-margin-function 'company-text-icons-margin)
    (company-text-face-extra-attributes '(:weight bold :slant italic))
    (company-text-icons-add-background t)
    (company-show-quick-access t)
    ;; Quick Access a Candidate
    (company-quick-access-modifier 'super)
    (company-quick-access-keys
     '("n" "t" "e" "h" "o" "s" "i" "a" "u" "r" "p" "d" "l" "c" "y" "g")))
#+end_src

*** Navigating around visible texts

This function enhances navigation  in Emacs by providing a quick  way to jump to
the next occurrence  of a character in  the visible portion of  the buffer using
the =avy= package.

#+begin_src emacs-lisp
  (defun jess/avy-goto-next-char (char &optional arg)
    "Jump to the next position of currently visible CHAR.
  The window scope is determined by `avy-all-windows' (ARG negates it)."
    (interactive (list (read-char "char: " t)
		       current-prefix-arg))
    (progn (require 'avy)
	   (avy-with avy-goto-char
		     (avy-jump
		      (if (= 13 char) "\n"
			(regexp-quote (string char)))
		      :window-flip arg))
	   (forward-char)))
#+end_src

The  code  configures  the  =avy=  package  in  Emacs  for  efficient  character
navigation and sets keybindings for quick jumping in the buffer.

#+begin_src emacs-lisp
  (use-package avy
    :custom
    (avy-keys
     '(?n ?t ?e ?h ?o ?s ?i ?a ?u ?r ?p ?d ?l ?c ?y ?g))
    :bind
    ("s-SPC" . avy-goto-char-timer)
    ("s-["   . avy-goto-char)
    ("s-]"   . jess/avy-goto-next-char))
#+end_src

*** Terminal emulator

By  using this  function, you  can easily  disable line  number display  and the
highlighting of the current line in the buffer where it is called.

#+begin_src emacs-lisp
  (defun jess/disable-line-num-and-hl ()
    (display-line-numbers-mode -1)
    (setq-local global-hl-line-mode nil))
#+end_src

By using  this function  and providing a  desired path as  an argument,  you can
update  the current  working  directory (=default-directory=)  in  Emacs to  the
specified path.

#+begin_src emacs-lisp
  (defun jess/update-pwd (path)
    (setq default-directory path))
#+end_src

These configurations provide key bindings,  hooks, and customizations to enhance
the functionality and behavior of the =vterm= package in Emacs.

#+begin_src emacs-lisp
  (use-package vterm
    :bind
    (("s-t" . vterm)
     :map vterm-mode-map
     ("C-q"   . vterm-send-next-key)
     ("C-M-v" . nil)
     :map vterm-copy-mode-map
     ("M-w" . vterm-copy-mode-done))
    :hook
    (vterm-mode . jess/disable-line-num-and-hl)
    :custom
    (vterm-buffer-name-string "vterm %s")
    (vterm-eval-cmds
     (let* ((cmds (custom--standard-value 'vterm-eval-cmds)))
       (add-to-list 'cmds '("update-pwd" jess/update-pwd)))))
#+end_src

*** Git client - Magit

Magit is  an Emacs package that  provides a powerful interface  for working with
Git  repositories.  It offers  commands  and  features  to perform  various  Git
operations  directly   within  Emacs,  such  as   staging  changes,  committing,
branching,  merging, and  interacting with  remote repositories.  Magit enhances
productivity  and streamlines  Git  workflows,  making it  a  valuable tool  for
managing version control in Emacs.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Vertico

The =vertico= package  replaces the default Emacs minibuffer  completion with an
enhanced interface. It  provides a vertical layout, allowing for  a more compact
and efficient display of completion candidates.

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-count 16)
    :hook
    (elpaca-after-init . vertico-mode))
#+end_src

*** Orderless

This code snippet configures the =orderless= package in Emacs by customizing the
completion  settings. It  enables  =orderless= style  matching for  completions,
disables default category settings for  completion, and overrides the completion
style  for the  =file= category  using =partial-completion=.  This improves  the
flexibility and effectiveness of Emacs completion.

#+begin_src emacs-lisp
  (use-package orderless
    :hook
    (elpaca-after-init
     . (lambda ()
	 (setq completion-styles '(orderless basic)
	       completion-category-defaults nil
	       completion-category-overrides '((file (styles partial-completion)))))))
#+end_src

*** Marginalia

This  code snippet  configures the  =marginalia=  package in  Emacs. It  enables
=marginalia-mode= after  Emacs initialization  and binds  the =marginalia-cycle=
command to  the key combination  =M-A= in the minibuffer.  =marginalia= enhances
the  minibuffer  completion  interface  by  providing  helpful  annotations  for
completion candidates.

#+begin_src emacs-lisp
  (use-package marginalia
    :bind
    (:map minibuffer-local-map
	  ("M-A" . marginalia-cycle))
    :hook
    (elpaca-after-init . marginalia-mode))
#+end_src

*** Consult

This  code  snippet  configures  the  =consult=  package  in  Emacs.  It  remaps
keybindings and customizes various  functions to enhance completion, navigation,
search,  and history  features.  =consult= provides  improved functionality  for
commands such as switching buffers, searching, navigating to specific lines, and
accessing history.

#+begin_src emacs-lisp
  (use-package consult
    :custom
    (xref-show-xrefs-function consult-xref)
    (xref-show-definitions-function consult-xref)
    :hook
    (completion-list-mode . consult-preview-at-point-mode)
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind
    (;; C-c bindings in `mode-specific-map'
     ("C-c M-x" . consult-mode-command)
     ("C-c h"   . consult-history)
     ("C-c k"   . consult-kmacro)
     ("C-c m"   . consult-man)
     ("C-c i"   . consult-info)
     ([remap Info-search] . consult-info)
     ;; C-x bindings in `ctl-x-map'
     ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
     ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
     ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
     ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
     ;; Other custom bindings
     ("M-y" . consult-yank-pop)                ;; orig. yank-pop
     ;; M-g bindings in `goto-map'
     ("M-g e"   . consult-compile-error)
     ("M-g f"   . consult-flymake)             ;; Alternative: consult-flycheck
     ("M-g g"   . consult-goto-line)           ;; orig. goto-line
     ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
     ("M-g o"   . consult-outline)             ;; Alternative: consult-org-heading
     ("M-g m"   . consult-mark)
     ("M-g k"   . consult-global-mark)
     ("M-g i"   . consult-imenu)
     ("M-g I"   . consult-imenu-multi)
     ;; M-s bindings in `search-map'
     ("M-s d" . consult-find)
     ("M-s D" . consult-locate)
     ("M-s g" . consult-grep)
     ("M-s G" . consult-git-grep)
     ("M-s r" . consult-ripgrep)
     ("M-s l" . consult-line)
     ("M-s L" . consult-line-multi)
     ("M-s k" . consult-keep-lines)
     ("M-s u" . consult-focus-lines)
     ("C-s"   . consult-line)
     ;; Isearch integration
     ("M-s e" . consult-isearch-history)
     :map isearch-mode-map
     ("M-e"   . consult-isearch-history)       ;; orig. isearch-edit-string
     ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
     ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
     ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
     ;; Minibuffer history
     :map minibuffer-local-map
     ("M-s" . consult-history)                 ;; orig. next-matching-history-element
     ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    )
#+end_src

** Misc

This code  snippet creates an  alias =yes-or-no-p= for the  =y-or-n-p= function,
allowing  you  to   use  a  shorter  and  more  intuitive   name  for  the  same
functionality.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

This code snippet enables moving deleted files to the system's trash folder.

#+begin_src emacs-lisp
  (custom-set-variables
   '(delete-by-moving-to-trash t))
#+end_src

This  code snippet  configures the  =smartparens= package  in Emacs.  It enables
=smartparens-mode= in  programming modes  and loads the  necessary configuration
for =smartparens= after Emacs initialization.

#+begin_src emacs-lisp
  (use-package smartparens
    :diminish
    :hook
    (prog-mode . smartparens-mode)
    (elpaca-after-init . (lambda ()
			   (require 'smartparens-config))))
#+end_src

This code  snippet customizes  text formatting  settings in  Emacs. It  sets the
=fill-column=   to  =80=,   =default-justification=  to   =full=,  and   enables
=colon-double-space=. These  settings control line wrapping,  justification, and
spacing around colons.

#+begin_src emacs-lisp
  (custom-set-variables
   '(fill-column 80)
   '(default-justification 'full)
   '(sentence-end-double-space nil))
#+end_src

#+begin_src emacs-lisp
  (use-package nyan-mode
    :custom
    (nyan-mode t)
    (nyan-animate-nyancat t)
    (nyan-bar-length 16))
#+end_src

** AI assistant

*** TabNine

#+begin_src emacs-lisp
  (use-package company-tabnine
    :after company
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+end_src

*** ChatGPT

#+begin_src emacs-lisp
  (defun jess/config-openai ()
    (if (eq system-type 'darwin)
	(progn
	  (load-file (expand-file-name "lisp/utils.el" user-emacs-directory))
	  (setq openai-key (jess/get-macos-keychain-password "openai")))
      (message "System type mismatch, required: darwin")))
#+end_src

#+begin_src emacs-lisp
  (use-package openai
    :elpaca
    (:type git :host github :repo "emacs-openai/openai")
    :config
    (jess/config-openai))
#+end_src

#+begin_src emacs-lisp
  (use-package chatgpt
    :after openai
    :elpaca
    (:type git :host github :repo "emacs-openai/chatgpt"))
#+end_src

** Window and buffer management

*** Perspective

The directory for =persp-state= file.

#+begin_src emacs-lisp
  (defconst jess/persp-state-file
    (expand-file-name "persp-state" jess/aux-directory))
#+end_src

This code  snippet configures the  =perspective= package  in Emacs. It  sets key
binding for =persp-list-buffers= command, customizes  the prefix key and default
file  for  saving the  =perspective=  state,  enables =persp-mode=  after  Emacs
initialization,  and  configures periodic  saving  of  the =perspective=  state.
Additionally,  it  integrates  =perspective=  with  the  =consult=  package  for
enhanced buffer selection.

#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)
    :custom
    (persp-mode-prefix-key (kbd "s-p"))
    (persp-state-default-file jess/persp-state-file)
    :hook
    (elpaca-after-init . persp-mode)
    :config
    (run-at-time nil (* 3 60) 'persp-state-save)
    (progn
      (require 'consult)
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources persp-consult-source)))
#+end_src

*** Window switch key bindings

You can easily switch  between windows in Emacs using =M-o=  to move forward and
=M-O= to move backward.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-O")
		  (lambda () (interactive) (other-window -1)))
#+end_src

* Manipulate Different Types of Files

** Language server protocol - Eglot

This  code  configures   the  =eglot=  package  in  Emacs   to  enable  extended
cross-referencing support. First, install =project= by =elpaca=, because =eglot=
does not work with the built-in =project= library.

#+begin_src emacs-lisp
  (use-package project)
  (use-package eglot
    :after project
    :hook
    (c++-mode    . eglot-ensure)
    (python-mode . eglot-ensure)
    :custom
    (eglot-extend-to-xref t))
#+end_src

** Configurations for each type of files

*** C++

#+begin_src emacs-lisp
  (defconst jess/c++-lsp-server
    '("clangd"
      "-j 8"
      "--background-index"
      "--clang-tidy"
      "--cross-file-rename"
      "--completion-style=detailed"
      "--pch-storage=memory"))
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
		 `(c++-mode ,jess/c++-lsp-server)))
#+end_src

*** Python

#+begin_src emacs-lisp
  (defconst jess/python-lsp-server "pylsp")
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
		 `(python-mode ,jess/python-lsp-server)))
#+end_src

This  code  configures  the  =pyvenv-auto= package  in  Emacs  to  automatically
activate the appropriate virtual environment when entering =python-mode=.

#+begin_src emacs-lisp
  (use-package pyvenv-auto
    :hook (python-mode . pyvenv-auto-run))
#+end_src

*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

*** CSV

#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

*** Org

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

*** Json

#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src
