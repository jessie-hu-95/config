#+title: Jessie's GNU Emacs Configuration

* Package Manager - =elpaca=

** Bootstrap

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** =use-package= support

#+begin_src emacs-lisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))
  (elpaca-wait)
#+end_src

** =use-feature= macro

#+begin_src emacs-lisp
  (defmacro use-feature (name &rest args)
    "Like `use-package' but accounting for asynchronous installation.
    NAME and ARGS are in `use-package'."
    (declare (indent defun))
    `(use-package ,name
       :elpaca nil
       ,@args))
#+end_src

** Load =exec-path= from shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (eq system-type 'darwin)
    :config (exec-path-from-shell-initialize))
  (elpaca-wait)
#+end_src

** Hide mode line lighter

#+begin_src emacs-lisp
  (use-package diminish)
  (elpaca-wait)
  (diminish 'visual-line-mode)
  (diminish 'line-number-mode)
  (add-hook 'eldoc-mode-hook
	    (lambda () (diminish 'eldoc-mode)))
#+end_src

* Basic Configuration

** Making Emacs write auxiliary files elsewhere

#+begin_src emacs-lisp
  (defconst jess/aux-directory
    (expand-file-name "aux" user-emacs-directory))

  (defconst jess/backup-directory
    (expand-file-name "backup" jess/aux-directory))
  (make-directory jess/backup-directory 'parents)

  (defconst jess/auto-save-directory
    (expand-file-name "auto-save" jess/aux-directory))
  (make-directory jess/auto-save-directory 'parents)

  (defconst jess/lock-directory
    (expand-file-name "lock" jess/aux-directory))
  (make-directory jess/lock-directory 'parents)

  (defconst jess/custom-file
    (expand-file-name "custom.el" temporary-file-directory))
#+end_src

*** Backup files

#+begin_src emacs-lisp
  (custom-set-variables
   '(backup-directory-alist `((".*" . ,jess/backup-directory)))
   '(backup-by-copying t)
   '(delete-old-versions t)
   '(kept-new-versions 64)
   '(kept-old-versions 32)
   '(version-control t))
#+end_src

*** Auto-save files

#+begin_src emacs-lisp
  (custom-set-variables
   '(auto-save-interval 32)
   '(auto-save-file-name-transforms
     `(("\\`/.*/\\([^/]+\\)\\'"
	,(concat jess/auto-save-directory "/\\1") t))))
#+end_src

*** Lock files

#+begin_src emacs-lisp
  (custom-set-variables
   '(lock-file-name-transforms
     `(("\\`/.*/\\([^/]+\\)\\'" ,(concat jess/lock-directory "/\\1") t))))
#+end_src

*** Custom file

#+begin_src emacs-lisp
  (custom-set-variables '(custom-file jess/custom-file))
  (load jess/custom-file 'noerror)
  (add-hook 'kill-emacs-query-functions
	    'custom-prompt-customize-unsaved-options)
#+end_src

** Modifier keys

#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
    (custom-set-variables
     '(mac-pass-command-to-system nil)
     '(mac-pass-control-to-system nil)
     '(mac-command-modifier 'super)
     '(mac-right-command-modifier 'meta)))
#+end_src

** Key binding to load init file

#+begin_src emacs-lisp
  (global-set-key (kbd "s-i")
		  (lambda () (interactive) (load-file user-init-file)))
#+end_src

** UI configurations

#+begin_src emacs-lisp
  (custom-set-variables
   '(scroll-bar-mode nil)
   '(tool-bar-mode nil)
   '(global-hl-line-mode t)
   '(global-visual-line-mode t)
   '(global-display-line-numbers-mode t)
   '(line-number-mode nil) ;; disable its mode line lighter
   '(scroll-margin 32)
   '(scroll-preserve-screen-position t)
   '(scroll-conservatively 101))
#+end_src

#+begin_src emacs-lisp
  (use-package ef-themes
    :custom (ef-themes-region '(no-extend))
    :config (load-theme 'ef-summer t))
#+end_src

** Minibuffer configurations

#+begin_src emacs-lisp
  (defconst jess/minibuffer-prompt-properties
    (cl-list* 'cursor-intangible t
	      (custom--standard-value 'minibuffer-prompt-properties)))
  (custom-set-variables
   '(minibuffer-prompt-properties jess/minibuffer-prompt-properties)
   '(read-extended-command-predicate 'command-completion-default-include-p)
   '(enable-recursive-minibuffers t))
#+end_src

** Save recent editing record

*** Recent opened files

#+begin_src emacs-lisp
  (custom-set-variables
   '(recentf-max-menu-items 64)
   '(recentf-max-saved-items 256)
   '(recentf-auto-cleanup 'never)
   '(recentf-mode t))
  (global-set-key (kbd "s-r") 'recentf-open-files)
  (run-at-time nil (* 3 60) 'recentf-save-list)
#+end_src

*** Save point places

#+begin_src emacs-lisp
  (custom-set-variables
   '(save-place-limit 1024)
   '(save-place-mode t))
#+end_src

*** Auto revert buffers

#+begin_src emacs-lisp
  (custom-set-variables
   '(auto-revert-interval 0.5)
   '(global-auto-revert-non-file-buffers t)
   '(global-auto-revert-mode t))
#+end_src

*** Undo history

#+begin_src emacs-lisp
  (defconst jess/undo-tree-directory
    (expand-file-name "undo-tree" jess/aux-directory))
  (use-package undo-tree
    :custom
    (undo-tree-history-directory-alist
     `((".*" . ,jess/undo-tree-directory)))
    :config
    (undo-tree-mode))
#+end_src

*** Window layout history

#+begin_src emacs-lisp
  (use-feature winner
    :custom (winner-mode t))
#+end_src

*** Minibuffer history

#+begin_src emacs-lisp
  (use-feature savehist
    :custom (savehist-mode t))
#+end_src

** Utilities

*** Some useful key bindings

#+begin_src emacs-lisp
  (use-feature misc
    :bind
    ("M-F" . forward-to-word)
    ("M-B" . backward-to-word))
#+end_src

*** Which key

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :custom
    (which-key-side-window-location 'right)
    (which-key-max-description-length 36)
    (which-key-max-display-columns 1)
    (which-key-mode t))
#+end_src

*** Completion

#+begin_src emacs-lisp
  (use-package company
    :diminish
    :custom
    (global-company-mode t))
#+end_src

*** Never lose the point again

#+begin_src emacs-lisp
  (use-package beacon
    :diminish
    :custom
    (beacon-size 8)
    (beacon-color "#cf0090")
    (beacon-blink-delay 0.1)
    (beacon-blink-duration 0.3)
    (beacon-mode t))
#+end_src

#+begin_src emacs-lisp
  (use-package golden-ratio-scroll-screen
    :custom-face
    (golden-ratio-scroll-highlight-line-face
     ((t (:extend t :background "#cf0090" :foreground "white" :weight bold))))
    :bind
    ([remap scroll-up-command]   . golden-ratio-scroll-screen-up)
    ([remap scroll-down-command] . golden-ratio-scroll-screen-down))
#+end_src

*** Navigating around visible texts

#+begin_src emacs-lisp
  (use-package avy
    :bind
    ("C-." . avy-goto-char-timer)
    ("C-;" . avy-goto-char)
    ("C-:" . avy-goto-char-in-line))
#+end_src

*** Terminal emulator

#+begin_src emacs-lisp
  (defun jess/disable-line-num-and-hl ()
    (display-line-numbers-mode -1)
    (setq-local global-hl-line-mode nil))
  (defun jess/update-pwd (path)
    (setq default-directory path))
  (use-package vterm
    :bind
    (("s-t" . vterm)
     :map vterm-mode-map
     ("C-q"   . vterm-send-next-key)
     ("C-M-v" . nil)
     :map vterm-copy-mode-map
     ("M-w" . vterm-copy-mode-done))
    :hook
    (vterm-mode . jess/disable-line-num-and-hl)
    :custom
    (vterm-buffer-name-string "vterm %s")
    (vterm-eval-cmds
     (let* ((cmds (custom--standard-value 'vterm-eval-cmds)))
       (add-to-list 'cmds '("update-pwd" jess/update-pwd)))))
#+end_src

*** Git client - Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-count 32)
    :hook
    (elpaca-after-init . vertico-mode))
#+end_src

*** Orderless

#+begin_src emacs-lisp
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :hook
    (elpaca-after-init . (lambda ()
			   (setq completion-styles '(orderless basic)
				 completion-category-defaults nil
				 completion-category-overrides '((file (styles partial-completion))))))
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    )
#+end_src

*** Marginalia

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :hook

    ;; Marginalia must be actived in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (elpaca-after-init . marginalia-mode))
#+end_src

*** Consult

#+begin_src emacs-lisp
  (use-package consult
    :custom
    (xref-show-xrefs-function consult-xref)
    (xref-show-definitions-function consult-xref)
    :hook
    (completion-list-mode . consult-preview-at-point-mode)
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind
    (;; C-c bindings in `mode-specific-map'
     ("C-c M-x" . consult-mode-command)
     ("C-c h" . consult-history)
     ("C-c k" . consult-kmacro)
     ("C-c m" . consult-man)
     ("C-c i" . consult-info)
     ([remap Info-search] . consult-info)
     ;; C-x bindings in `ctl-x-map'
     ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
     ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
     ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
     ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
     ;; Other custom bindings
     ("M-y" . consult-yank-pop)                ;; orig. yank-pop
     ;; M-g bindings in `goto-map'
     ("M-g e" . consult-compile-error)
     ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
     ("M-g g" . consult-goto-line)             ;; orig. goto-line
     ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
     ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
     ("M-g m" . consult-mark)
     ("M-g k" . consult-global-mark)
     ("M-g i" . consult-imenu)
     ("M-g I" . consult-imenu-multi)
     ;; M-s bindings in `search-map'
     ("M-s d" . consult-find)
     ("M-s D" . consult-locate)
     ("M-s g" . consult-grep)
     ("M-s G" . consult-git-grep)
     ("M-s r" . consult-ripgrep)
     ("M-s l" . consult-line)
     ("M-s L" . consult-line-multi)
     ("M-s k" . consult-keep-lines)
     ("M-s u" . consult-focus-lines)
     ;; Isearch integration
     ("M-s e" . consult-isearch-history)
     :map isearch-mode-map
     ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
     ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
     ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
     ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
     ;; Minibuffer history
     :map minibuffer-local-map
     ("M-s" . consult-history)                 ;; orig. next-matching-history-element
     ("M-r" . consult-history))                ;; orig. previous-matching-history-element
    )
#+end_src

** Misc

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

#+begin_src emacs-lisp
  (custom-set-variables
   '(delete-by-moving-to-trash t))
#+end_src

#+begin_src emacs-lisp
  (use-package smartparens
    :diminish
    :hook
    (prog-mode . smartparens-mode)
    (elpaca-after-init . (lambda ()
			   (require 'smartparens-config))))
#+end_src

** Window and buffer management

*** Perspective

#+begin_src emacs-lisp
  (defconst jess/persp-state-file
    (expand-file-name "persp-state" jess/aux-directory))
  (use-package perspective
    :bind
    ("C-x C-b" . persp-list-buffers)
    :custom
    (persp-mode-prefix-key (kbd "s-p"))
    (persp-state-default-file jess/persp-state-file)
    :hook
    (elpaca-after-init . persp-mode)
    :config
    (run-at-time nil (* 3 60) 'persp-state-save)
    (progn
      (require 'consult)
      (consult-customize consult--source-buffer :hidden t :default nil)
      (add-to-list 'consult-buffer-sources persp-consult-source)))
#+end_src

*** Window switch key bindings

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-O")
		  (lambda () (interactive) (other-window -1)))
#+end_src

** Dired

*** External =ls= program

#+begin_src emacs-lisp
  (setq insert-directory-program
	(shell-command-to-string "which ls | tr -d '\n'"))
  (let* ((ls-opts (getenv "EMACS_LS_OPTS")))
    (if ls-opts
	(custom-set-variables
	 '(dired-listing-switches ls-opts))))
#+end_src

*** Reusing Dired buffer

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
  (defun jess/dired-find-file ()
    (interactive)
    (let* ((filename (dired-get-filename)))
			(if (file-directory-p filename)
			    (dired-find-alternate-file)
			  (dired-find-file))))
  (defun jess/dired-goto-parent-directory ()
    (interactive)
    (find-alternate-file ".."))
#+end_src

*** Prefixing Dired buffers

#+begin_src emacs-lisp
  (defun jess/prefix-dired-buffers ()
    (rename-buffer (generate-new-buffer-name
		    (format "dired %s" dired-directory))))
#+end_src

*** Hide unintersting files

#+begin_src emacs-lisp
  (defconst jess/dired-omit-files
    (progn (require 'dired-x)
	   (concat (custom--standard-value 'dired-omit-files)
	    "\\|\.DS_Store"
	    "\\|\.CFUserTextEncoding")))
#+end_src

*** Applying configurations

#+begin_src emacs-lisp
  (use-feature dired
    :hook
    (dired-mode . jess/prefix-dired-buffers)
    :bind
    (:map dired-mode-map
	  ("RET" . jess/dired-find-file)
	  ("^"   . jess/dired-goto-parent-directory)))
#+end_src

#+begin_src emacs-lisp
  (use-feature dired-x
    :after dired
    :custom
    (dired-omit-files jess/dired-omit-files)
    :hook
    (dired-mode . dired-omit-mode))
#+end_src

* Manipulate Different Types of Files

** Language server protocol - Eglot

#+begin_src emacs-lisp
  (use-package eglot
    :custom (eglot-extend-to-xref t))
#+end_src


** Configurations for each type of files

*** Python

#+begin_src emacs-lisp
  (use-package pyvenv-auto
    :hook (python-mode . pyvenv-auto-run))
#+end_src

*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

*** CSV

#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

*** Org

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
