#+TITLE: Jessie's Emacs Configuration
#+AUTHOR: Jessie Hu
#+EMAIL: jessie.hu.95@icloud.com

* Contents
:PROPERTIES:
:TOC:      :include all :depth 2 :ignore this
:END:
:CONTENTS:
- [[#configuration-for-vinilla-emacs][Configuration for vinilla Emacs]]
  - [[#making-emacs-write-all-auxiliary-files-somewhere-else][Making Emacs write all auxiliary files somewhere else]]
  - [[#saving-customizations-besides-init-file][Saving Customizations besides init file]]
  - [[#config-modifier-keys][Config modifier keys]]
  - [[#improving-appearance][Improving appearance]]
  - [[#better-scrolling-behavior][Better scrolling behavior]]
  - [[#easing-editing-experience][Easing editing experience]]
  - [[#dired-the-directory-editor][Dired, the directory editor]]
- [[#enhance-editing-experience-with-third-party-packages][Enhance editing experience with third-party packages]]
  - [[#prerequisites][Prerequisites]]
  - [[#general-configs-for-all-text-editing-tasks][General configs for all text editing tasks]]
- [[#org-mode][Org mode]]
  - [[#show-org-mode-bullets-as-utf-8-characters][Show org-mode bullets as UTF-8 characters]]
  - [[#generate-table-of-contents][Generate table of contents]]
:END:

* Configuration for vinilla Emacs

** Making Emacs write all auxiliary files somewhere else

By default, Emacs may create many new files in the directory where
file is edited. This may be inconvenient in some setups, so Emacs has
mechanisms for changing the locations of all these files.

#+begin_src emacs-lisp
  (defconst aux-directory
    (expand-file-name "aux" user-emacs-directory))
#+end_src

*** Backup files

Save backup files to =aux/backup=.

#+begin_src emacs-lisp
  (defconst backup-directory
    (expand-file-name "backup" aux-directory))
  (setq backup-directory-alist `((".*" . ,backup-directory)))
  (setq backup-by-copying t)
  (setq delete-old-versions t)
  (setq kept-new-versions 64)
  (setq kept-old-versions 32)
  (setq version-control t)
#+end_src

*** Auto-save files

Save auto-save files to =aux/auto-save=.

#+begin_src emacs-lisp
  (defconst auto-save-directory
    (expand-file-name "auto-save" aux-directory))
  (make-directory auto-save-directory t)
  (setq auto-save-file-name-transforms
	`(("\\`/.*/\\([^/]+\\)\\'"
	   ,(concat auto-save-directory "/\\1") t)))
  (setq auto-save-interval 32)
#+end_src

*** Lock files

Save lock files to =aux/lock=.

#+begin_src emacs-lisp
  (defconst lock-directory
    (expand-file-name "lock" aux-directory))
  (setq lock-file-name-transforms
	`(("\\`/.*/\\([^/]+\\)\\'"
	   ,(concat lock-directory "/\\1") t)))
#+end_src

** Saving Customizations besides init file

Save customization file to =custom.el= in
=user-emacs-directory=. Suppress error reporting if this file doesn’t
exist by a non-nil second arg =t=.

#+begin_src emacs-lisp
  (defconst custom-file
    (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+end_src

Let Emacs prompts about unsaved customizations at termination time.

#+begin_src emacs-lisp
  (add-hook 'kill-emacs-query-functions
	    'custom-prompt-customize-unsaved-options)
#+end_src

** Config modifier keys

For macOS, prevent passing command and control keys to system Toolbox.

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-pass-command-to-system nil)
    (setq mac-pass-control-to-system nil))
#+end_src

Use left and right command key as =super= and =meta= keys
respectively.

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'super)
    (setq mac-right-command-modifier 'meta))
#+end_src

Additionally, =C-M-d= is bound to systemwide searching. To disable it,
run the following command from the shell.

#+begin_src shell
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys \
	   -dict-add 70 '<dict><key>enabled</key><false/></dict>'
#+end_src

** Improving appearance

Disable scroll bar and tool bar.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

Enable visual line, line number display and highlight current line.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (global-visual-line-mode)
  (global-hl-line-mode)
#+end_src

** Better scrolling behavior

Keep point away from the margin at the top and bottom of a window.

#+begin_src emacs-lisp
  (setq scroll-margin 32)
#+end_src

When using =C-v= and =M-v= to scroll up and down, the point jumps to
the center of a window. To disable this feature,

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position t)
#+end_src

If point moves off-screen, redisplay will scroll by up to
=scroll-conservatively= lines in order to bring point just barely onto
the screen again. If the value is greater than 100, redisplay will
never recenter point, but will always scroll just enough text to bring
point into view, even if you move far away.

#+begin_src emacs-lisp
  (setq scroll-conservatively 101)
#+end_src

** Easing editing experience

Remember recent visited files.

#+begin_src emacs-lisp
  (require 'recentf)
  (recentf-mode)
  (setq recentf-max-menu-items 64)
  (setq recentf-max-saved-items 256)
  (global-set-key (kbd "C-x C-r") 'recentf-open-files)
#+end_src

By default, =recentf= saves the list of recent files on exiting
Emacs. If Emacs exits abruptly for some reason the recent file list
will be lost. To call `recentf-save-list` periodically, e.g. every
minutes:

#+begin_src emacs-lisp
  (run-at-time nil 60 'recentf-save-list)
#+end_src

Remember point position for each buffer.

#+begin_src emacs-lisp
  (require 'saveplace)
  (save-place-mode)
  (setq save-place-limit 1024)
  (setq save-place-version-control 'nospecial)
#+end_src

Update buffer contents automatically.

#+begin_src emacs-lisp
  (global-auto-revert-mode)
  (setq auto-revert-interval 1)
#+end_src

Enlarge kill ring size.

#+begin_src emacs-lisp
  (setq kill-ring-max 512)
#+end_src

Let =M-F= and =M-B= behave like Vim's =w= and =b= keys in normal mode.

#+begin_src emacs-lisp
  (require 'misc)
  (global-set-key (kbd "M-F") 'forward-to-word)
  (global-set-key (kbd "M-B") 'backward-to-word)
#+end_src

** Dired, the directory editor

Dired makes an Emacs buffer containing a listing of a directory, and
optionally some of its subdirectories as well.

*** Use external =ls= implementation

Tell Dired to use external =ls= program. The last line will try to get
an environment variable =LA_OPTS= to use as =dired-listing-switches=,
if the variable not defined, leave it unchanged.

#+begin_src emacs-lisp
  (setq ls-lisp-use-insert-directory-program t)
  (setq insert-directory-program
	(shell-command-to-string "which ls | tr -d '\n'"))
  (let* ((ls-opts (getenv "LA_OPTS")))
    (if ls-opts (setq dired-listing-switches ls-opts)))
#+end_src

*** Reuse directory buffer

In Dired, when a directory chosen to visit, it is normally visited in
a new buffer – the Dired buffer chosen it in is not deleted.

Command =dired-find-alternate-file= replaces the current Dired buffer
with another buffer (it kills the current buffer). To enable this
command and to bind it to =RET=,

#+begin_src emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
#+end_src

In any case, the approach of just using =dired-find-alternate-file=
does not help with mouse clicks to visit a file or directory. This
command also does not help when using =^= to move up to the parent
directory. To kill the current directory (the child) when using =^=,

#+begin_src emacs-lisp
  (require 'dired)
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (define-key dired-mode-map (kbd "^")
		(lambda () (interactive) (find-alternate-file "..")))))
#+end_src

* Enhance editing experience with third-party packages

** Prerequisites

*** Set =$PATH= and =exec-path=

Some packages need some build tools available in user's shell =PATH=
environment variable.  Set up Emacs' =exec-path= and =PATH=
environment variable to match that used by the user's shell. This is
particularly useful under Mac OS X and macOS, where GUI apps are not
started from a shell.

#+begin_src emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    (interactive)
    (let* ((login-path
	    (shell-command-to-string "$SHELL --login -c 'echo $PATH'"))
	   (path-from-shell
	    (replace-regexp-in-string "[ \t\n]*$" "" login-path)))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))
#+end_src

Invoke this function on macOS:

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (set-exec-path-from-shell-PATH))
#+end_src

*** Bootstrap the =use-package= macro

The =use-package= macro allows one to isolate package configuration in
the init file in a way that is both performance-oriented and, well,
tidy.

First, add Melpa to =package-archives=:

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+end_src

Install =use-package= unless it exists.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

** General configs for all text editing tasks

*** Hints for prefixed key bindings

=which-key= is a minor mode for Emacs that displays the key bindings
following your currently entered incomplete command (a prefix) in a
popup.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+end_src

*** Basic completion settings

Company is a text completion framework for Emacs. The name stands for
"complete anything". It uses pluggable back-ends and front-ends to
retrieve and display completion candidates.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config (global-company-mode))
#+end_src

*** Never lose the point again

=beacon= is a global minor-mode. Whenever the window scrolls a light will
shine on top of the point so we know where it is.

#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :custom ((beacon-size 8)
	     (beacon-blink-delay 0.1)
	     (beacon-blink-duration 0.5))
    :config (beacon-mode)
    )
#+end_src

Scroll screen down or up, and highlight current line before or after
scrolling via =golden-ratio-scroll-screen=. Note that this package
does provide functions for =scroll-other-window=.

#+begin_src emacs-lisp
  (use-package golden-ratio-scroll-screen
    :ensure t
    :bind (([remap scroll-up-command]   . golden-ratio-scroll-screen-up)
	   ([remap scroll-down-command] . golden-ratio-scroll-screen-down)))
#+end_src

*** Recording undo history

The =undo-tree-mode= provided by this package replaces Emacs' undo
system with a system that treats undo history as what it is: a
branching tree of changes. Enable =undo-tree-mode= globally and save
undo-tree files into =aux/undo-tree=.

#+begin_src emacs-lisp
  (defconst undo-tree-directory
    (expand-file-name "undo-tree" aux-directory))
  (use-package undo-tree
    :ensure t
    :custom (undo-tree-history-directory-alist
	     `((".*" . ,undo-tree-directory)))
    :config (global-undo-tree-mode))
#+end_src

* Org mode

** Show =org-mode= bullets as UTF-8 characters

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+end_src

** Generate table of contents

#+begin_src emacs-lisp
  (use-package org-make-toc)
#+end_src
